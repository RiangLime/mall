<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.lime.mall.mapper.ProductMapper">

    <resultMap id="BaseResultMap" type="cn.lime.mall.model.entity.Product">
        <id property="productId" column="product_id" jdbcType="BIGINT"/>
        <result property="productCode" column="product_code" jdbcType="VARCHAR"/>
        <result property="productName" column="product_name" jdbcType="VARCHAR"/>
        <result property="productDescription" column="product_description" jdbcType="VARCHAR"/>
        <result property="productState" column="product_state" jdbcType="TINYINT"/>
        <result property="productSort" column="product_sort" jdbcType="INTEGER"/>
        <result property="productType1" column="product_type_1" jdbcType="VARCHAR"/>
        <result property="productType2" column="product_type_2" jdbcType="VARCHAR"/>
        <result property="gmtCreated" column="gmt_created" jdbcType="TIMESTAMP"/>
        <result property="gmtModified" column="gmt_modified" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="baseDetail" type="cn.lime.mall.model.vo.ProductDetailVo">
        <id property="productId" column="productId" jdbcType="BIGINT"/>
        <result property="productName" column="productName" jdbcType="VARCHAR"/>
        <result property="productCode" column="productCode" jdbcType="VARCHAR"/>
        <result property="productDescription" column="productDescription" jdbcType="VARCHAR"/>
        <result property="productSort" column="productSort" jdbcType="INTEGER"/>
        <result property="productState" column="productState" jdbcType="INTEGER"/>
        <result property="productBrand" column="productBrand" jdbcType="VARCHAR"/>
        <result property="createTime" column="createTime" jdbcType="BIGINT"/>
        <result property="modifiedTime" column="modifiedTime" jdbcType="BIGINT"/>
        <result property="productType1" column="productTypeVirtual" jdbcType="VARCHAR"/>
        <result property="productType2" column="productTypeDetect" jdbcType="VARCHAR"/>
        <result property="productVisible" column="productVisible" javaType="INTEGER"/>
        <!-- Collection for tags -->
        <collection property="productTags" ofType="cn.lime.mall.model.vo.SimpleTagVo">
            <id property="tagId" column="productTagId"/>
            <result property="tagName" column="productTagName"/>
        </collection>
    </resultMap>
    <resultMap id="specificationInfo" type="cn.lime.mall.model.vo.ProductSpecificationInfo">
        <id property="specificationKey" column="att_name" jdbcType="VARCHAR"/>
        <collection property="specificationValues" ofType="string" column="att_val">
            <result column="att_val"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        product_id
        ,product_code,product_name,
        product_description,product_state,product_sort,
        product_type_1,product_type_2,gmt_created,
        gmt_modified
    </sql>
    <select id="pageProduct" resultType="cn.lime.mall.model.vo.ProductPageVo">
        with sales as (
        SELECT
        p.product_id,
        sum(oi.number) as sales
        FROM
        Product p
        left join Order_Item oi on
        p.product_id = oi.product_id
        GROUP by
        p.product_id
        )

        SELECT
        distinct t.*,
        p_url.url as productMainUrl,
        COALESCE(sales.sales, 0)
        FROM
        (
        SELECT
        p.product_id as productId,
        p.product_code as productCode,
        p.product_name as productName,
        p.product_state as productState,
        p.product_type_1 as productType,
        p.reserve_str_a as productBrand,
        UNIX_TIMESTAMP(p.gmt_created) as createTime,
        p.product_sort as productSort,
        MIN(s.price) as priceRangeStart,
        MAX(s.price) as priceRangeEnd,
        p.visible as productVisible,
        SUM(s.stock) as productTotalStock,
        CASE
        WHEN COUNT(s.sku_id) > 1 THEN true
        ELSE false
        END AS multiSku,
        COALESCE(v.view_number, 0) AS productViews
        FROM
        Product p
        left join Sku s on
        p.product_id = s.product_id
        left join (
        select
        product_id ,
        COUNT(*) as view_number
        FROM
        Product_View_Log pvl
        group by
        pvl.product_id) v on
        v.product_id = p.product_id
        GROUP BY
        p.product_id) t
        left join Product_Have_Tag pht on
        t.productId = pht.product_id
        left join sales on
        sales.product_id = t.productId
        left join (
        select
        *
        FROM
        Product_Url pu
        where
        pu.url_type = 1) p_url on
        p_url.product_id = t.productId
        WHERE
        1 = 1
        <if test="productName != null">
            and t.productName like CONCAT('%', #{productName}, '%')
        </if>
        <if test="productType != null">
            and t.productType = #{productType}
        </if>
        <if test="state != null">
            and t.productState = #{state}
        </if>
        <if test="tagIds != null and tagIds.size() > 0">
            and tag_id IN
            <foreach item="tagId" index="index" collection="tagIds" open="(" separator="," close=")">
                #{tagId}
            </foreach>
        </if>
        order by t.productSort
    </select>
    <select id="getProductBasicDetail" resultMap="baseDetail">
        SELECT p.product_id                   as productId,
               p.product_name                 as productName,
               p.product_code                 as productCode,
               p.product_description          as productDescription,
               p.product_sort                 as productSort,
               p.product_state                as productState,
               p.product_type_1               as productTypeVirtual,
               p.product_type_2               as productTypeDetect,
               p.reserve_str_a                as productBrand,
               p.visible as productVisible,
               UNIX_TIMESTAMP(p.gmt_created)  as createTime,
               UNIX_TIMESTAMP(p.gmt_modified) as modifiedTime,
               pt.tag_name                    as productTagName,
               pt.tag_id as productTagId
        FROM Product p
                 left join Product_Have_Tag pht on
            p.product_id = pht.product_id
                 LEFT join Product_Tag pt on
            pht.tag_id = pt.tag_id
        WHERE p.product_id = #{productId}
        <if test="state != null">
            and p.product_state = #{state}
        </if>
    </select>
    <select id="getProductSpecification" resultMap="specificationInfo">
        SELECT sa.attribute_name  as att_name,
               sa.attribute_value as att_val
        FROM Product p
                 left join Sku s on
            p.product_id = s.product_id
                 left join SkuAttribute sa on
            sa.sku_id = s.sku_id
        WHERE p.product_id = #{productId}
    </select>
</mapper>
